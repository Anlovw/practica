# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qgui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QDesktopWidget
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt, QThread, QTimer, QObject, pyqtSignal
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QAbstractItemView
from PyQt5.QtWidgets import QMessageBox, QLineEdit, QSizePolicy, QVBoxLayout

from PyQt5.QtWidgets import QSizePolicy, QHeaderView
from PyQt5.QtWidgets import QApplication, QMessageBox, QCheckBox
from PyQt5.QtWidgets import QWidget, QInputDialog, QMessageBox

import csv
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import cv2
import os
from move_detec import  PushUp, Squats, Posture
import time
import random
import json
from video_player import *
from tgtoken import send_message_to_tg_user
from DazaBanih import *
import chime
from notifier import Notifier
def chime_notif():
    chime.success(sync=True)

def convert_cv2_to_pixmap(cv2_image):
    height, width, channel = cv2_image.shape
    bytes_per_line = 3 * width
    q_image = QImage(cv2_image.data, width, height, bytes_per_line, QImage.Format_RGB888)
    pixmap = QPixmap.fromImage(q_image)
    return pixmap
def write_to_log(str):
        print(str)

def add_row_to_csv(file_path, row_data):
    with open(file_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(row_data)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        screen = QDesktopWidget().screenGeometry()

        screen_width = screen.width()
        screen_height = screen.height()
        app_width = int(screen_width/2)
        app_height = int(screen_height/2)

        MainWindow.setObjectName("MainWindow")

        MainWindow.resize(app_width, app_height)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.icon_only_widget = QtWidgets.QWidget(self.centralwidget)
        self.icon_only_widget.setObjectName("icon_only_widget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.icon_only_widget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.home_btn_1 = QtWidgets.QPushButton(self.icon_only_widget)
        self.home_btn_1.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/icon/circle_b.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_btn_1.setIcon(icon)
        self.home_btn_1.setIconSize(QtCore.QSize(40, 40))
        self.home_btn_1.setCheckable(True)
        self.home_btn_1.setAutoExclusive(True)
        self.home_btn_1.setObjectName("home_btn_1")
        self.verticalLayout.addWidget(self.home_btn_1)
        self.dashborad_btn_1 = QtWidgets.QPushButton(self.icon_only_widget)
        self.dashborad_btn_1.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icon/icon/chart_rb.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dashborad_btn_1.setIcon(icon1)
        self.dashborad_btn_1.setIconSize(QtCore.QSize(40, 40))
        self.dashborad_btn_1.setCheckable(True)
        self.dashborad_btn_1.setAutoExclusive(True)
        self.dashborad_btn_1.setObjectName("dashborad_btn_1")
        self.verticalLayout.addWidget(self.dashborad_btn_1)
        self.orders_btn_1 = QtWidgets.QPushButton(self.icon_only_widget)
        self.orders_btn_1.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icon/icon/acc_b.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.orders_btn_1.setIcon(icon2)
        self.orders_btn_1.setIconSize(QtCore.QSize(40, 40))
        self.orders_btn_1.setCheckable(True)
        self.orders_btn_1.setAutoExclusive(True)
        self.orders_btn_1.setObjectName("orders_btn_1")
        self.verticalLayout.addWidget(self.orders_btn_1)
        self.products_btn_1 = QtWidgets.QPushButton(self.icon_only_widget)
        self.products_btn_1.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icon/icon/settings.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.products_btn_1.setIcon(icon3)
        self.products_btn_1.setIconSize(QtCore.QSize(40, 40))
        self.products_btn_1.setCheckable(True)
        self.products_btn_1.setAutoExclusive(True)
        self.products_btn_1.setObjectName("products_btn_1")
        self.verticalLayout.addWidget(self.products_btn_1)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        spacerItem = QtWidgets.QSpacerItem(20, 375, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)
        self.exit_btn_1 = QtWidgets.QPushButton(self.icon_only_widget)
        self.exit_btn_1.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icon/icon/close.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.exit_btn_1.setIcon(icon4)
        self.exit_btn_1.setIconSize(QtCore.QSize(40, 40))
        self.exit_btn_1.setObjectName("exit_btn_1")
        self.verticalLayout_3.addWidget(self.exit_btn_1)
        self.gridLayout.addWidget(self.icon_only_widget, 0, 0, 1, 1)
        self.pages = QtWidgets.QWidget(self.centralwidget)
        self.pages.setObjectName("pages")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.pages)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget = QtWidgets.QWidget(self.pages)
        self.widget.setMinimumSize(QtCore.QSize(0, 40))
        self.widget.setObjectName("widget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_4.setContentsMargins(0, 0, 9, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.change_btn = QtWidgets.QPushButton(self.widget)
        self.change_btn.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icon/icon/menu-4-32.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.change_btn.setIcon(icon5)
        self.change_btn.setIconSize(QtCore.QSize(14, 14))
        self.change_btn.setCheckable(True)
        self.change_btn.setObjectName("change_btn")
        self.horizontalLayout_4.addWidget(self.change_btn)
        spacerItem1 = QtWidgets.QSpacerItem(236, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.verticalLayout_5.addWidget(self.widget)
        self.stackedWidget = QtWidgets.QStackedWidget(self.pages)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page1_main = QtWidgets.QWidget()
        self.page1_main.setObjectName("page1_main")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.page1_main)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.selector_exercise = QtWidgets.QComboBox(self.page1_main)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.selector_exercise.setFont(font)
        self.selector_exercise.setObjectName("selector_exercise")
        self.selector_exercise.addItem("")
        #self.selector_exercise.addItem("")
        #self.selector_exercise.addItem("")
        #self.selector_exercise.addItem("")
        self.gridLayout_2.addWidget(self.selector_exercise, 1, 1, 1, 1)

        self.label_select_cam = QtWidgets.QLabel(self.page1_main)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_select_cam.setFont(font)
        self.label_select_cam.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label_select_cam.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_select_cam.setObjectName("label_select_cam")
        self.gridLayout_2.addWidget(self.label_select_cam, 2, 0, 1, 1)
        self.selector_camera = QtWidgets.QComboBox(self.page1_main)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.selector_camera.setFont(font)
        self.selector_camera.setObjectName("selector_camera")
        self.selector_camera.addItem("")
        self.gridLayout_2.addWidget(self.selector_camera, 2, 1, 1, 1)
        self.label_video = QtWidgets.QLabel(self.page1_main)
        #self.label_video.setFrameShape(QtWidgets.QFrame.WinPanel)
        #self.label_video.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_video.setText("")
        self.label_video.setPixmap(QtGui.QPixmap(":/icon/icon/video-off.png"))
        self.label_video.setAlignment(QtCore.Qt.AlignCenter)
        self.label_video.setObjectName("label")
        #self.label_video.setScaledContents(True)
        #mark

        self.gridLayout_2.addWidget(self.label_video, 4, 0, 4, 2)
        self.label_select_exer = QtWidgets.QLabel(self.page1_main)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_select_exer.sizePolicy().hasHeightForWidth())
        self.label_select_exer.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_select_exer.setFont(font)
        self.label_select_exer.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label_select_exer.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_select_exer.setObjectName("label_select_exer")
        self.gridLayout_2.addWidget(self.label_select_exer, 1, 0, 1, 1)
        self.label_description = QtWidgets.QLabel(self.page1_main)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_description.setFont(font)
        self.label_description.setFrameShape(QtWidgets.QFrame.Box)
        self.label_description.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_description.setObjectName("label_description")
        self.gridLayout_2.addWidget(self.label_description, 5, 2, 1, 1)
        self.label_image_example = QtWidgets.QLabel(self.page1_main)
        self.label_image_example.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_image_example.setText("")
        self.label_image_example.setPixmap(QtGui.QPixmap('icon/image_256.png' ))#":/icon/icon/image.svg"))
        self.label_image_example.setAlignment(QtCore.Qt.AlignCenter)
        self.label_image_example.setObjectName("label_image_example")
        self.label_image_example.setScaledContents(True)
        #mark
        self.gridLayout_2.addWidget(self.label_image_example, 1, 2, 4, 1)
        self.label_score = QtWidgets.QLabel(self.page1_main)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_score.sizePolicy().hasHeightForWidth())
        self.label_score.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_score.setFont(font)
        self.label_score.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.label_score.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_score.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_score.setWordWrap(True)
        self.label_score.setObjectName("label_score")
        self.gridLayout_2.addWidget(self.label_score, 0, 0, 1, 1)
        self.label_best_score = QtWidgets.QLabel(self.page1_main)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_best_score.sizePolicy().hasHeightForWidth())
        self.label_best_score.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_best_score.setFont(font)
        self.label_best_score.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_best_score.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_best_score.setWordWrap(True)
        self.label_best_score.setObjectName("label_best_score")
        self.gridLayout_2.addWidget(self.label_best_score, 0, 1, 1, 1)
        self.button_start = QtWidgets.QPushButton(self.page1_main)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.button_start.setFont(font)
        self.button_start.setObjectName("pushButton_3")
        self.gridLayout_2.addWidget(self.button_start, 3, 0, 1, 2)
        self.label_example = QtWidgets.QLabel(self.page1_main)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_example.setFont(font)
        self.label_example.setFrameShape(QtWidgets.QFrame.Box)
        self.label_example.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.label_example.setObjectName("label_example")
        self.gridLayout_2.addWidget(self.label_example, 0, 2, 1, 1)
        self.label_descripion = QtWidgets.QLabel(self.page1_main)
        self.label_descripion.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_descripion.setTextFormat(QtCore.Qt.PlainText)
        self.label_descripion.setAlignment(QtCore.Qt.AlignJustify | QtCore.Qt.AlignTop)
        self.label_descripion.setObjectName("label_image_example_2")
        self.gridLayout_2.addWidget(self.label_descripion, 6, 2, 2, 1)
        self.stackedWidget.addWidget(self.page1_main)
        self.page_2_stats = QtWidgets.QWidget()
        self.page_2_stats.setObjectName("page_2_stats")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.page_2_stats)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_list_best_scor = QtWidgets.QLabel(self.page_2_stats)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_list_best_scor.setFont(font)
        self.label_list_best_scor.setAlignment(QtCore.Qt.AlignCenter)
        self.label_list_best_scor.setObjectName("label_best_scor")
        self.gridLayout_3.addWidget(self.label_list_best_scor, 0, 4, 1, 1)

        # selector
        self.selector_stats = QtWidgets.QComboBox(self.page_2_stats)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.selector_stats.setFont(font)
        self.selector_stats.setObjectName("selector_stats")
        #self.selector_stats.addItem("")
        self.gridLayout_3.addWidget(self.selector_stats, 2, 0, 1, 1)
        #

        self.button_save_stats = QtWidgets.QPushButton(self.page_2_stats)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.button_save_stats.setFont(font)
        self.button_save_stats.setCheckable(False)
        self.button_save_stats.setObjectName("button_save_stats")
        self.gridLayout_3.addWidget(self.button_save_stats, 5, 1, 1, 1)

        self.worlds_best_score = QtWidgets.QTableWidget(self.page_2_stats)
        self.worlds_best_score.setObjectName("table_best_score_2")
        self.worlds_best_score.setColumnCount(0)
        self.worlds_best_score.setRowCount(0)
        self.gridLayout_3.addWidget(self.worlds_best_score, 5, 4, 1, 1)
        self.button_month = QtWidgets.QPushButton(self.page_2_stats)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.button_month.setFont(font)
        self.button_month.setObjectName("button_month")
        self.gridLayout_3.addWidget(self.button_month, 1, 1, 1, 1)
        self.button_week = QtWidgets.QPushButton(self.page_2_stats)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.button_week.setFont(font)
        self.button_week.setObjectName("button_week")
        self.gridLayout_3.addWidget(self.button_week, 1, 2, 1, 1)
        self.label_stats_period = QtWidgets.QLabel(self.page_2_stats)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_stats_period.setFont(font)
        self.label_stats_period.setAlignment(QtCore.Qt.AlignCenter)
        self.label_stats_period.setObjectName("label_stats_period")
        self.gridLayout_3.addWidget(self.label_stats_period, 0, 0, 1, 3)
        self.button_year = QtWidgets.QPushButton(self.page_2_stats)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.button_year.setFont(font)
        self.button_year.setObjectName("button_year")
        self.gridLayout_3.addWidget(self.button_year, 1, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem2, 2, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem3, 2, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem4, 2, 1, 1, 1)
        self.label_worlds_best = QtWidgets.QLabel(self.page_2_stats)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_worlds_best.setFont(font)
        self.label_worlds_best.setAlignment(QtCore.Qt.AlignCenter)
        self.label_worlds_best.setObjectName("label_worlds_best")
        self.gridLayout_3.addWidget(self.label_worlds_best, 4, 4, 1, 1)
        self.table_best_score = QtWidgets.QTableWidget(self.page_2_stats)
        self.table_best_score.setObjectName("table_best_score")
        self.table_best_score.setColumnCount(0)
        self.table_best_score.setRowCount(0)
        self.gridLayout_3.addWidget(self.table_best_score, 1, 4, 3, 1)
        self.label_stats = QtWidgets.QLabel(self.page_2_stats)
        #self.label_stats.setFrameShape(QtWidgets.QFrame.Box)
        self.label_stats.setText("")
        self.label_stats.setPixmap(QtGui.QPixmap(":/icon/icon/image.svg"))
        self.label_stats.setAlignment(QtCore.Qt.AlignCenter)
        self.label_stats.setObjectName("label_stats")
        self.gridLayout_3.addWidget(self.label_stats, 3, 0, 2, 3)
        #self.label_stats.setScaledContents(True)

        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem5, 3, 3, 1, 1)
        self.stackedWidget.addWidget(self.page_2_stats)
        self.page_3_account = QtWidgets.QWidget()
        self.page_3_account.setObjectName("page_3_account")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.page_3_account)
        self.gridLayout_4.setObjectName("gridLayout_4")

        self.label_input_code = QtWidgets.QLabel(self.page_3_account)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_input_code.setFont(font)
        self.label_input_code.setObjectName("label_input_code")
        self.gridLayout_4.addWidget(self.label_input_code, 3, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem6, 1, 2, 1, 1)

        #
        self.label_td_qr = QtWidgets.QLabel(self.page_3_account)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_td_qr.setFont(font)
        self.label_td_qr.setObjectName("label_input_code")
        self.gridLayout_4.addWidget(self.label_td_qr, 5, 1, 1, 1)
        #self.label_td_qr.setText('AAAAAA')
        pixmap = QPixmap(r'qr\tg_qr.jpg')

        # Set the pixmap as the content of the QLabel
        self.label_td_qr.setPixmap(pixmap)
        #

        self.lineEdit_tg_id = QtWidgets.QLineEdit(self.page_3_account)
        self.lineEdit_tg_id.setText("")
        self.lineEdit_tg_id.setObjectName("lineEdit_tg_id")
        self.gridLayout_4.addWidget(self.lineEdit_tg_id, 2, 1, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem7, 1, 1, 1, 1)

        self.lineEdit_code_confirm = QtWidgets.QLineEdit(self.page_3_account)
        self.lineEdit_code_confirm.setInputMask("")
        self.lineEdit_code_confirm.setText("")
        self.lineEdit_code_confirm.setObjectName("lineEdit")
        self.gridLayout_4.addWidget(self.lineEdit_code_confirm, 3, 1, 1, 1)

        self.label_place_spacer = QtWidgets.QLabel(self.page_3_account)
        self.label_place_spacer.setText("")
        self.label_place_spacer.setObjectName("label_place_spacer")
        self.gridLayout_4.addWidget(self.label_place_spacer, 4, 0, 1, 1)
        self.pushButton_send_verif = QtWidgets.QPushButton(self.page_3_account)

        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.pushButton_send_verif.setFont(font)
        self.pushButton_send_verif.setObjectName("pushButton")
        self.gridLayout_4.addWidget(self.pushButton_send_verif, 2, 2, 1, 1)
        self.pushButton_confirm = QtWidgets.QPushButton(self.page_3_account)

        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.pushButton_confirm.setFont(font)
        self.pushButton_confirm.setObjectName("pushButton_2")
        self.gridLayout_4.addWidget(self.pushButton_confirm, 3, 2, 1, 1)
        self.label_input_id = QtWidgets.QLabel(self.page_3_account)
        #id input
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.label_input_id.setFont(font)
        self.label_input_id.setObjectName("label_input_id")
        self.gridLayout_4.addWidget(self.label_input_id, 2, 0, 1, 1)
        self.label_your_acc = QtWidgets.QLabel(self.page_3_account)


        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_your_acc.setFont(font)
        self.label_your_acc.setAlignment(QtCore.Qt.AlignCenter)
        self.label_your_acc.setObjectName("label_your_acc")
        self.gridLayout_4.addWidget(self.label_your_acc, 0, 1, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem8, 1, 0, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem9, 4, 1, 1, 1)
        self.stackedWidget.addWidget(self.page_3_account)

        self.page_4_settings = QtWidgets.QWidget()
        self.page_4_settings.setObjectName("page_4_settings")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.page_4_settings)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.checkBox_sound_notif = QtWidgets.QCheckBox(self.page_4_settings)
        self.checkBox_sound_notif.setMinimumSize(QtCore.QSize(30, 30))
        self.checkBox_sound_notif.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.checkBox_sound_notif.setFont(font)
        self.checkBox_sound_notif.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.checkBox_sound_notif.setAutoFillBackground(False)
        self.checkBox_sound_notif.setIconSize(QtCore.QSize(10, 10))
        self.checkBox_sound_notif.setObjectName("checkBox_sound_notif")
        self.gridLayout_5.addWidget(self.checkBox_sound_notif, 1, 0, 1, 1)
        self.checkBox_tg_notif = QtWidgets.QCheckBox(self.page_4_settings)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.checkBox_tg_notif.setFont(font)
        self.checkBox_tg_notif.setObjectName("checkBox_tg_notif")
        self.gridLayout_5.addWidget(self.checkBox_tg_notif, 3, 0, 1, 1)
        self.pushButton_save = QtWidgets.QPushButton(self.page_4_settings)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.pushButton_save.setFont(font)
        self.pushButton_save.setObjectName("pushButton_save")
        self.gridLayout_5.addWidget(self.pushButton_save, 5, 0, 1, 1)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem10, 2, 0, 1, 1)
        self.label_settings = QtWidgets.QLabel(self.page_4_settings)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_settings.setFont(font)
        self.label_settings.setAlignment(QtCore.Qt.AlignCenter)
        self.label_settings.setObjectName("label_settings")
        self.gridLayout_5.addWidget(self.label_settings, 0, 0, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem11, 6, 0, 1, 1)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem12, 4, 0, 1, 1)
        self.stackedWidget.addWidget(self.page_4_settings)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.page_5)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.label_8 = QtWidgets.QLabel(self.page_5)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout_6.addWidget(self.label_8, 0, 0, 1, 1)
        self.stackedWidget.addWidget(self.page_5)
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.page_6)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.label_9 = QtWidgets.QLabel(self.page_6)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.gridLayout_7.addWidget(self.label_9, 0, 0, 1, 1)
        self.stackedWidget.addWidget(self.page_6)
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setObjectName("page_7")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.page_7)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.label_10 = QtWidgets.QLabel(self.page_7)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.gridLayout_8.addWidget(self.label_10, 0, 0, 1, 1)
        self.stackedWidget.addWidget(self.page_7)
        self.verticalLayout_5.addWidget(self.stackedWidget)
        self.gridLayout.addWidget(self.pages, 0, 2, 1, 1)
        self.full_menu_widget = QtWidgets.QWidget(self.centralwidget)
        self.full_menu_widget.setObjectName("full_menu_widget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.full_menu_widget)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.home_btn_2 = QtWidgets.QPushButton(self.full_menu_widget)
        self.home_btn_2.setIcon(icon)
        self.home_btn_2.setIconSize(QtCore.QSize(40, 40))
        self.home_btn_2.setCheckable(True)
        self.home_btn_2.setAutoExclusive(True)
        self.home_btn_2.setObjectName("home_btn_2")
        self.verticalLayout_2.addWidget(self.home_btn_2)
        self.dashborad_btn_2 = QtWidgets.QPushButton(self.full_menu_widget)
        self.dashborad_btn_2.setIcon(icon1)
        self.dashborad_btn_2.setIconSize(QtCore.QSize(40, 40))
        self.dashborad_btn_2.setCheckable(True)
        self.dashborad_btn_2.setAutoExclusive(True)
        self.dashborad_btn_2.setObjectName("dashborad_btn_2")
        self.verticalLayout_2.addWidget(self.dashborad_btn_2)
        self.orders_btn_2 = QtWidgets.QPushButton(self.full_menu_widget)
        self.orders_btn_2.setIcon(icon2)
        self.orders_btn_2.setIconSize(QtCore.QSize(40, 40))
        self.orders_btn_2.setCheckable(True)
        self.orders_btn_2.setAutoExclusive(True)
        self.orders_btn_2.setObjectName("orders_btn_2")
        self.verticalLayout_2.addWidget(self.orders_btn_2)
        self.products_btn_2 = QtWidgets.QPushButton(self.full_menu_widget)
        self.products_btn_2.setIcon(icon3)
        self.products_btn_2.setIconSize(QtCore.QSize(40, 40))
        self.products_btn_2.setCheckable(True)
        self.products_btn_2.setAutoExclusive(True)
        self.products_btn_2.setObjectName("products_btn_2")
        self.verticalLayout_2.addWidget(self.products_btn_2)
        self.verticalLayout_4.addLayout(self.verticalLayout_2)
        spacerItem13 = QtWidgets.QSpacerItem(20, 373, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem13)
        self.exit_btn_2 = QtWidgets.QPushButton(self.full_menu_widget)
        self.exit_btn_2.setIcon(icon4)
        self.exit_btn_2.setIconSize(QtCore.QSize(40, 40))
        self.exit_btn_2.setObjectName("exit_btn_2")
        self.verticalLayout_4.addWidget(self.exit_btn_2)
        self.gridLayout.addWidget(self.full_menu_widget, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.change_btn.toggled['bool'].connect(self.icon_only_widget.setVisible) # type: ignore
        self.change_btn.toggled['bool'].connect(self.full_menu_widget.setHidden) # type: ignore
        self.home_btn_1.toggled['bool'].connect(self.home_btn_2.setChecked) # type: ignore
        self.dashborad_btn_1.toggled['bool'].connect(self.dashborad_btn_2.setChecked) # type: ignore
        self.orders_btn_1.toggled['bool'].connect(self.orders_btn_2.setChecked) # type: ignore
        self.products_btn_1.toggled['bool'].connect(self.products_btn_2.setChecked) # type: ignore
        self.home_btn_2.toggled['bool'].connect(self.home_btn_1.setChecked) # type: ignore
        self.dashborad_btn_2.toggled['bool'].connect(self.dashborad_btn_1.setChecked) # type: ignore
        self.orders_btn_2.toggled['bool'].connect(self.orders_btn_1.setChecked) # type: ignore
        self.products_btn_2.toggled['bool'].connect(self.products_btn_1.setChecked) # type: ignore
        self.exit_btn_2.clicked.connect(MainWindow.close) # type: ignore
        self.exit_btn_1.clicked.connect(MainWindow.close) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #print('Setup UI')

    def retranslateUi(self, MainWindow):
        #
        self.cahe_stats = 0
        #self.
        #upload settings
        self.settings_path = 'osa_settings.json'
        self.upload_settings()
        #print(self.settings)
        #self.check_account()
        text_for_label_your_acc = 'Your account '
        if self.settings['tg_id'] is not None:
            text_for_label_your_acc += '\n' +self.settings['name']
        self.label_your_acc.setText(text_for_label_your_acc)

        #make notifire
        list_of_notification_func = []
        if self.settings['settings']['sys_notif']:
            list_of_notification_func.append(chime_notif)
            self.exercise_notifier = Notifier((chime_notif))
        else:
            self.exercise_notifier = Notifier()
        if self.settings['settings']['tg_notif']:
            list_of_notification_func.append(self.notify_in_tg)
        #list_of_notification_func = [chime_notif, self.notify_in_tg]
        self.posture_notifier = Notifier(*list_of_notification_func)





        self.verif_code = None
        self.tg_id_in_input = None
        #
        self.video_player = None
        # upload data about best score
        self.path_to_best_score = 'best_score.json'
        self.upload_best_score()
        self.prev_score = 0
        #
        self.stats_path = 'stats.csv'
        self.do_stats_cleaning()

        #
        self.defoult_img_path = ":/icon/icon/image.svg"
        self.defoult_description = 'тут будет описание выполнения упражнения, когда вы его выберете и нажмете "Start"'

        #
        self.exercises = {}
        self.exercises_local_amount = {}
        exercises_list = [Squats(self.exercise_notifier), PushUp(self.exercise_notifier), Posture( self.posture_notifier) ]
        for i in exercises_list:
            self.exercises[i.beauty_name()] = i
            self.exercises_local_amount[i.beauty_name()] = 0


        #my setuper
        self.selectors_val = {'exercise': '', 'cam': ''}
        #

        #
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        # exercise selector on stats
        self.stats_exercise = 'All exercises'
        self.selector_stats.addItem(self.stats_exercise)
        self.selector_stats.addItems(self.exercises.keys())
        self.selector_stats.currentTextChanged.connect(self.on_period_select)


        # exercise selector on main
        self.selector_exercise.addItems( self.exercises.keys())
        self.selector_exercise.setItemText(0, _translate("MainWindow", "Not selected"))
        #self.selector_exercise.setItemText(1, _translate("MainWindow", "Push Up"))
        #self.selector_exercise.setItemText(2, _translate("MainWindow", "Squats"))
        #self.selector_exercise.setItemText(3, _translate("MainWindow", "Posture"))
        self.selector_exercise.currentTextChanged.connect(self.on_exercise_select)

        #селектор камер
        self.cams_dict = get_available_cameras_dict()
        self.cams_dict['Example'] = 'Example'
        self.selector_camera.addItems(self.cams_dict.keys())
        self.selector_camera.setItemText(0, _translate("MainWindow", "Not selected"))
        self.selector_camera.currentTextChanged.connect(self.on_cam_select)

        self.label_select_cam.setText(_translate("MainWindow", "Select camera:"))
        self.label_select_exer.setText(_translate("MainWindow", "Select exercies:"))

        self.label_description.setText(_translate("MainWindow", "Description"))
        self.label_score.setText(_translate("MainWindow", "Score:"))
        self.label_best_score.setText(_translate("MainWindow", "Local Best Score:"))

        self.button_start_state = None
        self.button_start.setText(_translate("MainWindow", "START"))
        self.button_start.clicked.connect(self.main_start_stop)

        self.label_example.setText(_translate("MainWindow", "Example"))
        self.label_descripion.setFixedSize(500, 300)
        self.label_descripion.setStyleSheet("font-size: 30px;")
        self.label_descripion.setWordWrap(True)

        self.label_descripion.setText(_translate("MainWindow", 'тут будет описание выполнения упражнения, когда вы его выберете и нажмете "Start"'))
        self.label_list_best_scor.setText(_translate("MainWindow", "Your Best Score"))

        self.button_save_stats.setText(_translate("MainWindow", "Send stats in Tg"))
        self.button_save_stats.clicked.connect(self.on_save_stats)

        self.button_month.setText(_translate("MainWindow", "Month"))
        self.button_month.clicked.connect(self.on_month_button_click)
        self.button_week.setText(_translate("MainWindow", "Week"))
        self.button_week.clicked.connect(self.on_week_button_click)
        self.button_year.setText(_translate("MainWindow", "Year"))
        self.button_year.clicked.connect(self.on_year_button_click)

        self.label_stats_period.setText(_translate("MainWindow", "Statistic period"))
        self.label_worlds_best.setText(_translate("MainWindow", "World\'s best"))
        self.label_input_code.setText(_translate("MainWindow", "Input verification code: "))

        self.pushButton_send_verif.setText(_translate("MainWindow", "Send verification code"))
        self.pushButton_send_verif.clicked.connect(self.on_send_verification_code)
        self.pushButton_confirm.setText(_translate("MainWindow", "Confirm"))
        self.pushButton_confirm.clicked.connect(self.on_confirm)

        self.label_input_id.setText(_translate("MainWindow", "Input your tg id: "))
        #self.label_your_acc.setText(_translate("MainWindow", "Your account"))

        self.checkBox_sound_notif.setText(_translate("MainWindow", "Send system audio when the posture is incorrect"))
        self.checkBox_sound_notif.setChecked(self.settings['settings']['sys_notif'])
        self.checkBox_tg_notif.setText(_translate("MainWindow", "Send telegram notifications when the posture is incorrect"))
        self.checkBox_tg_notif.setChecked(self.settings['settings']['tg_notif'])

        self.pushButton_save.setText(_translate("MainWindow", "Save settings"))
        self.pushButton_save.clicked.connect(self.on_save_settings)

        self.label_settings.setText(_translate("MainWindow", "Settings"))
        self.label_8.setText(_translate("MainWindow", "Customers Page"))
        self.label_9.setText(_translate("MainWindow", "Search Page"))
        self.label_10.setText(_translate("MainWindow", "User Page"))

        self.home_btn_2.setText(_translate("MainWindow", "Exercises"))
        self.dashborad_btn_2.setText(_translate("MainWindow", "Statistics"))
        self.orders_btn_2.setText(_translate("MainWindow", "Account"))
        self.products_btn_2.setText(_translate("MainWindow", "Settings"))
        self.exit_btn_2.setText(_translate("MainWindow", "Exit"))

        #print('retranslate')

    def on_save_settings(self):
        self.settings['settings']['sys_notif'] = self.checkBox_sound_notif.isChecked()
        self.settings['settings']['tg_notif'] = self.checkBox_tg_notif.isChecked()
        self.save_settings()
        list_of_notification_func = []
        if self.settings['settings']['sys_notif']:
            list_of_notification_func.append(chime_notif)
            self.exercise_notifier = Notifier((chime_notif))
        else:
            self.exercise_notifier = Notifier()

        if self.settings['settings']['tg_notif']:
            list_of_notification_func.append(self.notify_in_tg)
        # list_of_notification_func = [chime_notif, self.notify_in_tg]
        self.posture_notifier = Notifier(*list_of_notification_func)
        #print(self.settings)

    def on_save_stats(self):
        if self.settings['tg_id'] is None:
            self.check_account()
            return
        df = pd.DataFrame(pd.read_csv(self.stats_path))
        current_date = pd.Timestamp.today().strftime('%Y-%m-%d')
        for i in self.exercises:
            df.loc[len(df.index)] = [current_date, i, 0]
        df['Date'] = pd.to_datetime(df['Date'])

        df.set_index('Date', inplace=True)
        df = df.groupby('Exercise').resample('D').mean()
        df = df.reset_index(drop=False)
        n = 7
        df = df.groupby('Exercise').apply(lambda x: x.tail(n))
        df = df[['Date', 'Exercise', 'Amount']]
        df = df.dropna()
        table_string_view = 'Your stats for last 7 days\n' + df.to_string(index=False)
        try:
            send_message_to_tg_user(self.settings['tg_id'], table_string_view)
        except:
            write_to_log('cant send message to tg user')


    def on_confirm(self):
        code_frome_user = self.lineEdit_code_confirm.text()
        #print(code_frome_user, self.verif_code)
        if str(self.verif_code) == code_frome_user and code_frome_user is not None and code_frome_user != '':
            #save changes
            self.settings['tg_id'] = self.tg_id_in_input
            self.save_settings()
            #
            try:
                message = 'Welcome ' + self.settings['name'] + '\n'
                send_message_to_tg_user(self.tg_id_in_input, message + 'You have successfully logged in')
            except:
                write_to_log('cant send message to tg user')
            try:
                update_or_insert_data_thread(self.settings['tg_id'], self.settings['name'], self.best_score['Total'])
            except:
                pass
            #
            message_box = QMessageBox()
            message_box.setIcon(QMessageBox.Information)
            message_box.setWindowTitle('Сообщение')
            message_box.setText('Вы успешно вошли')
            response = message_box.exec()

    def on_send_verification_code(self):
        if self.settings['tg_id'] is not None:
            message_box = QMessageBox()
            message_box.setIcon(QMessageBox.Information)
            # Устанавливаем заголовок окна
            message_box.setWindowTitle('Сообщение')
            message_box.setTextFormat(Qt.RichText)
            message_box.setText('Вы хотите выйти из текущего аккаунта?')
            message_box.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            response = message_box.exec()
            if response == QMessageBox.Ok:
                pass
                #print(self.lineEdit_tg_id.text())
                #self.send_code_to()
            elif response == QMessageBox.Cancel:
                return
        self.send_code_to(self.lineEdit_tg_id.text())

    def send_code_to(self, tg_id):

        if not tg_id.isdigit():
            message_box = QMessageBox()
            message_box.setIcon(QMessageBox.Information)
            message_box.setWindowTitle('Сообщение')
            message_box.setText('Некорректный tg_id. Что бы узнать свой id напишите боту "@getmyid_bot"')
            response = message_box.exec()
            return
        name = self.get_name_from_user()
        try:
            name = name[:21]
        except:
            pass
        if name is False:
            return
        
        else:
            self.settings['name'] = name
        self.tg_id_in_input = tg_id
        self.verif_code = random.randint(1000, 9999)
        message = 'Your code for Osa:\n' + str(self.verif_code)
        try:
            send_message_to_tg_user(tg_id, message)
        except:
            write_to_log('cant send message to tg user')

    def get_name_from_user(self):

        class InputMessageBox(QMessageBox):
            def __init__(self, parent=None):
                super().__init__(parent)

                self.setIcon(QMessageBox.Information)
                self.setWindowTitle('Сообщение')

                # Создаем QLineEdit и устанавливаем его размер
                self.text_input = QLineEdit(self)
                self.text_input.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

                # Устанавливаем текст сообщения
                self.setText('Введите имя пользователя')

                # Создаем layout для messagebox и добавляем QLineEdit
                layout = self.layout()
                layout.addWidget(self.text_input, 1, 1)

        # В вашем основном коде
        msg_box = InputMessageBox()
        response = msg_box.exec()

        if response == QMessageBox.Ok:
            entered_text = msg_box.text_input.text()
            return entered_text
        else:
            return False

    def check_account(self):
        if self.settings['tg_id'] is None:
            if self.settings['show_if_tg_none']:
                message_box = QMessageBox()
                message_box.setIcon(QMessageBox.Information)
                # Устанавливаем заголовок окна
                message_box.setWindowTitle('Сообщение')
                # Устанавливаем текст сообщения
                message_box.setTextFormat(Qt.RichText)
                message_box.setText('Вы не указали telegram аккаунт. Перейти на вкладку аутеинтефикации?')
                # Добавляем чекбокс "Don't show it again"
                checkbox = QCheckBox("Не показывать снова")
                #checkbox.setStyleSheet("QCheckBox { white-space: pre-wrap; }")
                checkbox.setStyleSheet("QCheckBox { font-size: 30px; }")
                checkbox.setFixedSize(400, 30)
                message_box.setCheckBox(checkbox)
                # Добавляем дополнительные кнопки (например, ОК и Отмена)
                message_box.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                # Отображаем окно и ждем, пока пользователь не закроет его
                response = message_box.exec()
                # Проверяем, какую кнопку пользователь нажал
                if response == QMessageBox.Ok:
                    #print('Пользователь нажал ОК.')
                    self.stackedWidget.setCurrentIndex(2)
                elif response == QMessageBox.Cancel:
                    pass
                    #print('Пользователь нажал Отмена.')
                if checkbox.isChecked():
                    self.settings['show_if_tg_none'] = False
                    self.save_settings()
    def upload_settings(self):
        with open(self.settings_path) as json_file:
            self.settings = json.load(json_file)
    def on_year_button_click(self):
        self.draw_stats('Year', self.stats_exercise)
    def on_month_button_click(self):
        self.draw_stats('Month', self.stats_exercise)
    def on_week_button_click(self):
        self.draw_stats('Week', self.stats_exercise)
    def on_period_select(self, text):
        self.stats_exercise = text
        #print(text)
    def upload_best_score(self):
        with open(self.path_to_best_score) as json_file:
            self.best_score = json.load(json_file)
    def save_best_score(self):
        with open(self.path_to_best_score, 'w') as json_file:
            json.dump(self.best_score, json_file)
    def save_settings(self):
        with open(self.settings_path, 'w') as json_file:
            json.dump(self.settings, json_file)
    def ImageUpdateSlot(self, Image):
        self.label_video.setPixmap(QPixmap.fromImage(Image))

    def CancelFeed(self):
        self.video_player.stop()

    def set_example_image(self, relative_path_to_image):
        if relative_path_to_image == '' or relative_path_to_image is None:
            self.label_image_example.setPixmap(QtGui.QPixmap(self.defoult_img_path))
            return
        current_path = os.getcwd()
        # print("Текущий путь:", current_path)
        example_file_path = current_path + relative_path_to_image
        # print(example_file_path)
        try:
            template = cv2.imread(example_file_path)
            template = convert_cv2_to_pixmap(template)
        except:
            write_to_log('incorrect filepath')
            return

        self.label_image_example.setPixmap(template)
        #self.label_image_example.setScaledContents(True)
    def set_description_of_exercise(self, description):
        try:
            self.label_descripion.setText(description)
        except:
            write_to_log('unable to set the description')

    def chang_video_player(self, exercise, videostream_path, score_udater):
        if self.video_player is not None:
            self.video_player.stop()
        self.video_player = VideoPlayer(exercise_type= exercise,
                                        videostream_path= videostream_path,
                                        scores_updater=score_udater)

    def clear_video_player(self):
        if self.video_player is not None:
            self.video_player.stop()

    def update_score(self, exercise,score, local_best_score):
        # update amount of exercise
        score_diff = score - self.prev_score
        if score_diff > 0:
            #print('IN sd')
            self.exercises_local_amount[exercise.beauty_name()] += score_diff
            #print(self.exercises_local_amount)
            #print(self)
        self.prev_score = score


        #update labels to show score
        self.label_score.setText('Score: ' + exercise.get_beauty_score(score))
        self.label_best_score.setText('Local Best Score: ' + exercise.get_beauty_score(local_best_score))

        if self.best_score[exercise.beauty_name()] < local_best_score:
            self.best_score[exercise.beauty_name()] = local_best_score
            # calc total score
            total = 0
            for name, i in self.exercises.items():
                total += self.best_score[name] * i.score_scaler()
            self.best_score['Total'] = round(total)
            self.save_best_score()
    def main_start_stop(self):
        # криво но зато работает
        exercises_list = [Squats(self.exercise_notifier), PushUp(self.exercise_notifier), Posture(self.posture_notifier)]
        for i in exercises_list:
            self.exercises[i.beauty_name()] = i
        self.clear_video_player()

        # end of криво
        #print(self.exercises_local_amount)

        if (self.selectors_val['exercise']  == '' or self.selectors_val['cam'] == '' or
                self.selectors_val['exercise']  == 'Not selected' or self.selectors_val['cam'] == 'Not selected'):
            self.set_example_image('') # defoul val substitutes in the set_example_image
            self.set_description_of_exercise( self.defoult_description)
            return
        if self.button_start_state is None:
            #defoult state
            self.button_start_state = 'Stop'
            self.button_start.setText('STOP')
            self.button_start.setStyleSheet("background-color: red;")
            #self.score

        elif self.button_start_state == 'Start':
            self.button_start_state = 'Stop'
            self.button_start.setText('STOP')
            self.button_start.setStyleSheet("background-color: red;")

        elif self.button_start_state == 'Stop':
            self.on_main_stop()
            self.button_start_state = 'Start'
            self.button_start.setText('START')
            self.button_start.setStyleSheet("background-color: green;")
            return



        #print('selector config:', self.selectors_val)


        selected_exercise_str = self.selectors_val['exercise']


        path_to_img = self.exercises[selected_exercise_str].path_to_example_img()
        ex_descr = self.exercises[selected_exercise_str].pose_requirements()

        # set the example image of correct posture while doing exercise
        self.set_example_image(path_to_img)
        self.set_description_of_exercise(ex_descr)

        selected_cam_str = self.selectors_val['cam']
        if self.cams_dict[selected_cam_str] == 'Example':
            cam_path = self.exercises[selected_exercise_str].path_to_video_example()
        else:
            cam_path = self.cams_dict[selected_cam_str]
        self.chang_video_player(self.exercises[selected_exercise_str], cam_path, self.update_score)
        self.video_player.ImageUpdate.connect(self.ImageUpdateSlot)

        self.video_player.start()
        #time.sleep(3)
        #self.video_player.stop()
        # косяк проверить на то что не нот селектед и пример
        #self.show_video(exercise_type= self.exercises[selected_exercise_str])
    def on_exercise_select(self, text):
        self.selectors_val['exercise'] = text

    def on_cam_select(self, text):
        self.selectors_val['cam'] = text

    def update_best_score_table(self):
        self.table_best_score.setColumnCount(2)
        self.table_best_score.setRowCount(len(self.best_score))
        for ind, (name, val) in enumerate(self.best_score.items()):
            iname = QTableWidgetItem(str(name))
            ival = QTableWidgetItem(str(val))
            self.table_best_score.setItem(ind, 0, iname)
            self.table_best_score.setItem(ind, 1, ival)

        self.table_best_score.setEditTriggers(QAbstractItemView.NoEditTriggers)

        # Настройка заголовков столбцов
        self.table_best_score.setHorizontalHeaderLabels(['Exercise', 'Score'])
        self.table_best_score.resizeColumnsToContents()

        font = self.table_best_score.font()
        font.setPointSize(20)  # Увеличьте значение, чтобы увеличить размер текста
        self.table_best_score.setFont(font)

        self.table_best_score.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        header = self.table_best_score.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)

    def update_worlds_best_table(self):
        data_db = []
        try:
            query_table_data(data_db)
        except:
            pass
        #print(data_db)
        self.worlds_best_score.setColumnCount(2)

        self.worlds_best_score.setRowCount(len(self.best_score))

        for ind, (name, score) in enumerate(data_db):
            iname = QTableWidgetItem(str(name))
            ival = QTableWidgetItem(str(score))
            self.worlds_best_score.setItem(ind, 0, iname)
            self.worlds_best_score.setItem(ind, 1, ival)

        self.worlds_best_score.setEditTriggers(QAbstractItemView.NoEditTriggers)

        # Настройка заголовков столбцов
        self.worlds_best_score.setHorizontalHeaderLabels(['Name', 'Total score'])
        self.worlds_best_score.resizeColumnsToContents()

        font = self.worlds_best_score.font()
        font.setPointSize(20)  # Увеличьте значение, чтобы увеличить размер текста
        self.worlds_best_score.setFont(font)

        self.worlds_best_score.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        header = self.worlds_best_score.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Stretch)


    def on_main_stop(self):
        #print('saving stats')
        current_date = datetime.now().strftime("%Y-%m-%d")
        for name, amount in self.exercises_local_amount.items():
            #print(name, amount)
            if amount > 0:
                add_row_to_csv(self.stats_path, [current_date, name, amount])
                self.exercises_local_amount[name] = 0

    def make_stats(self):
        pass

    def do_stats_cleaning(self):
        '''combine rows in df with same date and exercise and sums theris value'''
        df = pd.read_csv(self.stats_path)
        df['Date'] = pd.to_datetime(df['Date'])

        # Группируем по столбцам "date" и "name", и просуммируем значения "value"
        df = df.groupby(['Date', 'Exercise'], as_index=False)['Amount'].sum()

        df.to_csv(self.stats_path, index=False)

    def draw_stats(self, period, exercise_name):
        #print(period, exercise_name)

        period_to_code = {'Year': 'Y',
                          'Month': 'M',
                          'Week': 'D'}
        if period not in period_to_code:
            write_to_log('in draw_stats period not in period_to_code')
            return

        df = pd.DataFrame(pd.read_csv(self.stats_path))


        current_date = pd.Timestamp.today().strftime('%Y-%m-%d')
        for i in self.exercises:
            df.loc[len(df.index)] = [current_date,  i, 0]
        df['Date'] = pd.to_datetime(df['Date'])
        #print(df)

        if period == 'Week':
            df.set_index('Date', inplace=True)
            df = df.groupby('Exercise').resample('D').mean()
            df = df.reset_index(drop=False)
            n = 7
            df = df.groupby('Exercise').apply(lambda x: x.tail(n))
            df = df[['Exercise', 'Date', 'Amount']]

            df = df.reset_index(drop=True)
        if period == 'Month':
            df.set_index('Date', inplace=True)
            df = df.groupby('Exercise').resample('D').mean()
            df = df.reset_index(drop=False)
            n = 30
            df = df.groupby('Exercise').apply(lambda x: x.tail(n))
            df = df[['Exercise', 'Date', 'Amount']]

            df = df.reset_index(drop=True)
        if period == 'Year':
            df['Date'] = df['Date'].dt.year
            df = df.groupby(['Date', 'Exercise']).mean()
            df = df.reset_index(drop=False)
        #print(df)
        period_to_code = {'Year': 'по годам',
                          'Month': 'за последние 30 дней',
                          'Week': 'за последние 7 дней'}
        if exercise_name == 'All exercises':
            canvas = self.make_plot_for_all(df, period_to_code[period])
        else:
            canvas = self.make_hist(df, exercise_name, period_to_code[period])

        pixmap = QPixmap(canvas.size())
        canvas.render(pixmap)

        # Создаем QLabel и устанавливаем в него QPixmap
        self.label_stats.setPixmap(pixmap)
    def make_plot_for_all(self, df, period):

        df.set_index('Date', inplace=True)
        #df = df.groupby('Exercise').resample(period).mean()
        df = df.reset_index(drop=False)
        df.fillna(0, inplace=True)
        #print(df)

        plt.figure(figsize=(10, 5))
        for exercise, data in df.groupby('Exercise'):
            plt.plot(data['Date'], data['Amount'], marker='o', label=exercise)

        plt.xlabel('Дата')
        plt.ylabel('Среднее значение суммарного колличества очков')

        plt.title('Графики средних суммарных сделаныйх повторений каждого упражнения {}'.format(period))
        #plt.legend()
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        # Получаем объект FigureCanvas и добавляем его в QLabel
        canvas = FigureCanvas(plt.gcf())
        canvas.draw()
        return canvas

    def make_hist(self, df, exercise_name, period):

        query = 'Exercise == "{}"'.format(exercise_name)
        df = df.query(query)

        #df.set_index('Date', inplace=True)

        #df = df.groupby('Exercise').resample(period).mean()
        #df = df.reset_index(drop=False)
        # df = df.dropna()
        #df.fillna(0, inplace=True)

        plt.figure(figsize=(10, 5))
        plt.bar(df['Date'], df['Amount'], align='edge', alpha=0.7, color='green')
        plt.xticks(df['Date'], rotation=70)  # Поворачиваем подписи оси x для лучшей читаемости
        # Настройки осей и заголовка
        plt.title('Гистограмма количества суммарно сделаныйх повторений {} {}'.format(exercise_name, period))
        #plt.legend()
        plt.xlabel('Дата')
        plt.ylabel('Коллтчество')
        plt.tight_layout()

        # Отображение графика
        # plt.tight_layout()
        #plt.show()
        canvas = FigureCanvas(plt.gcf())
        canvas.draw()
        return canvas

    def notify_in_tg(self):
        try:
            if self.settings['tg_id'] is not None:
                message = 'Your posture is incorrect, it may cause pain and expenses in future\nYou can disable notifications in settings'
                send_message_to_tg_user(self.settings['tg_id'], message)
        except:
            pass
import resource_rc

